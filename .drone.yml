---
kind: pipeline
type: docker
name: teleport-connect-test

platform:
  os: linux
  arch: amd64
  
volumes:
  - name: teleport-ssh
    host:
      path: /opt/teleport/erianna
      
steps:
  - name: test-teleport-connection
    image: charlesportwoodii/drone-teleport:latest
    network_mode: host
    volumes:
      - name: teleport-ssh
        path: /opt/teleport/erianna
    settings:
      op: connect
      proxy: teleport.erianna.net
      hosts:
        - packages.teleport.erianna.net
      username: drone
      data_path: /opt/teleport/erianna
      script:
        commands:
          - whoami
          - ls
          
---
kind: pipeline
type: docker
name: build-amd64

environment:
  DEFAULT_VERSION: 1.21.6
  DEFAULT_REVISION: 1

platform:
  os: linux
  arch: amd64
      
depends_on:
  - teleport-connect-test
  
steps:
  - name: preflight
    image: python:3-alpine
    commands:
      - pip3 install semver
      - python3 genenv
      - echo $(uname -s):$(uname -r):$(uname -v):$(uname -m)
      - mkdir -p build/deb
      - mkdir -p build/alpine
      - mkdir -p build/rpm
  - name: focal
    image: charlesportwoodii/ubuntu:20.04-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: focal
      BUILD_OS: Ubuntu
      BUILD_OS_VERSION: "20.04"
    commands:
      - bash -lc "make build fpm_debian"
      - mkdir -p build/deb/$BUILD_IMAGE
      - mv *$BUILD_IMAGE*.deb build/deb/$BUILD_IMAGE/
  - name: jammy
    image: charlesportwoodii/ubuntu:22.04-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: jammy
      BUILD_OS: Ubuntu
      BUILD_OS_VERSION: "22.04"
    commands:
      - apt update
      - apt install --reinstall ca-certificates luajit-2.1
      - bash -lc "make build fpm_debian"
      - mkdir -p build/deb/$BUILD_IMAGE
      - mv *$BUILD_IMAGE*.deb build/deb/$BUILD_IMAGE/
  - name: "alpine3.14"
    image: charlesportwoodii/alpine:3.14-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: "alpine3.14"
      BUILD_OS: Alpine
      BUILD_OS_VERSION: "3.14"
    commands:
      - bash -lc "apk add --no-cache luajit-2.1"
      - bash -lc "make clean base openssl pcre nginx fpm_alpine"
      - mkdir -p build/alpine/v$BUILD_OS_VERSION/main/x86_64
      - mv *.apk build/alpine/v$BUILD_OS_VERSION/main/x86_64
  - name: "alpine3.15"
    image: charlesportwoodii/alpine:3.15-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: "alpine3.15"
      BUILD_OS: Alpine
      BUILD_OS_VERSION: "3.15"
    commands:
      - bash -lc "apk add --no-cache luajit-2.1"
      - bash -lc "make clean base openssl pcre nginx fpm_alpine"
      - mkdir -p build/alpine/v$BUILD_OS_VERSION/main/x86_64
      - mv *.apk build/alpine/v$BUILD_OS_VERSION/main/x86_64
  - name: deploy
    image: plugins/s3-sync
    when:
      event:
        - tag
    depends_on:
      - focal
      - jammy
      - "alpine3.14"
      - "alpine3.15"
    settings:
      bucket:
        from_secret: AWS_BUCKET
      endpoint:
        from_secret: AWS_HOST
      access_key:
        from_secret: AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: AWS_SECRET_ACCESS_KEY
      source: build/
      path_style: true
      target: /
      delete: false
      acl:
        "*": public-read
        
---
kind: pipeline
type: docker
name: build-arm64

environment:
  DEFAULT_VERSION: 1.21.6
  DEFAULT_REVISION: 1

platform:
  os: linux
  arch: arm64
      
depends_on:
  - teleport-connect-test
      
steps:
  - name: preflight
    image: python:3-alpine
    commands:
      - pip3 install semver
      - python3 genenv
      - echo $(uname -s):$(uname -r):$(uname -v):$(uname -m)
      - mkdir -p build/deb
      - mkdir -p build/alpine
      - mkdir -p build/rpm
  - name: focal
    image: charlesportwoodii/ubuntu:20.04-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: focal
      BUILD_OS: Ubuntu
      BUILD_OS_VERSION: "20.04"
    commands:
      - bash -lc "make build fpm_debian"
      - mkdir -p build/deb/$BUILD_IMAGE
      - mv *$BUILD_IMAGE*.deb build/deb/$BUILD_IMAGE/
  - name: jammy
    image: charlesportwoodii/ubuntu:22.04-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: jammy
      BUILD_OS: Ubuntu
      BUILD_OS_VERSION: "22.04"
    commands:
      - apt update
      - apt install --reinstall ca-certificates luajit-2.1
      - bash -lc "make build fpm_debian"
      - mkdir -p build/deb/$BUILD_IMAGE
      - mv *$BUILD_IMAGE*.deb build/deb/$BUILD_IMAGE/
  - name: "alpine3.14"
    image: charlesportwoodii/alpine:3.14-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: "alpine3.14"
      BUILD_OS: Alpine
      BUILD_OS_VERSION: "3.14"
    commands:
      - bash -lc "apk add --no-cache luajit-2.1 || true"
      - bash -lc "make clean base openssl pcre nginx fpm_alpine"
      - mkdir -p build/alpine/v$BUILD_OS_VERSION/main/aarch64
      - mv *.apk build/alpine/v$BUILD_OS_VERSION/main/aarch64
  - name: "alpine3.15"
    image: charlesportwoodii/alpine:3.15-build
    depends_on:
      - preflight
    environment:
      BUILD_IMAGE: "alpine3.15"
      BUILD_OS: Alpine
      BUILD_OS_VERSION: "3.15"
    commands:
      - bash -lc "apk add --no-cache luajit-2.1 || true"
      - bash -lc "make clean base openssl pcre nginx fpm_alpine"
      - mkdir -p build/alpine/v$BUILD_OS_VERSION/main/aarch64
      - mv *.apk build/alpine/v$BUILD_OS_VERSION/main/aarch64
  - name: deploy
    image: plugins/s3-sync
    when:
      event:
        - tag
    depends_on:
      - focal
      - jammy
      - "alpine3.14"
      - "alpine3.15"
    settings:
      bucket:
        from_secret: AWS_BUCKET
      endpoint:
        from_secret: AWS_HOST
      access_key:
        from_secret: AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: AWS_SECRET_ACCESS_KEY
      source: build/
      path_style: true
      target: /
      delete: false
      acl:
        "*": public-read

---
kind: pipeline
type: docker
name: update-packages

platform:
  os: linux
  arch: amd64
  
depends_on:
  - build-amd64
  - build-arm64

volumes:
  - name: teleport-ssh
    host:
      path: /opt/teleport/erianna
      
steps:
  - name: update-apt-packages
    when:
      event:
        - tag
    image: charlesportwoodii/drone-teleport:latest
    network_mode: host
    volumes:
      - name: teleport-ssh
        path: /opt/teleport/erianna
    settings:
      op: connect
      proxy: teleport.erianna.net
      hosts:
        - packages.teleport.erianna.net
      username: drone
      data_path: /opt/teleport/erianna
      script:
        commands:
          - /usr/local/bin/update-apt-packages
  - name: update-alpine-packages
    when:
      event:
        - tag
    image: charlesportwoodii/drone-teleport:latest
    network_mode: host
    volumes:
      - name: teleport-ssh
        path: /opt/teleport/erianna
    settings:
      op: connect
      proxy: teleport.erianna.net
      hosts:
        - packages.teleport.erianna.net
      username: drone
      data_path: /opt/teleport/erianna
      script:
        commands:
          - /usr/local/bin/update-alpine-packages x86_64
          - /usr/local/bin/update-alpine-packages aarch64
          
---
kind: pipeline
type: docker
name: docker-amd64

platform:
  os: linux
  arch: amd64

depends_on:
  - update-packages

environment:
  DEFAULT_VERSION: 1.21.6
  DEFAULT_REVISION: 1

steps:
  - name: preflight
    image: python:3-alpine
    commands:
      - pip3 install semver
      - python3 genenv
  - name: docker
    depends_on:
      - preflight
    when:
      event:
        - tag
    image: docker
    environment:
      username:
        from_secret: DOCKER_USERNAME
      password:
        from_secret: DOCKER_PASSWORD
    commands:
      - docker build -f Dockerfile $(for i in $(cat .envs); do echo -n "--build-arg $i "; done) -t charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")-amd64 -t charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")-amd64 --no-cache --compress --squash .
      - docker login -u=$username -p=$password
      - docker push charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")-amd64
      - docker push charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")-amd64
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: docker-arm64

platform:
  os: linux
  arch: arm64

depends_on:
  - update-packages

environment:
  DEFAULT_VERSION: 1.21.6
  DEFAULT_REVISION: 1

steps:
  - name: preflight
    image: python:3-alpine
    commands:
      - pip3 install semver
      - python3 genenv
  - name: docker
    depends_on:
      - preflight
    when:
      event:
        - tag
    image: docker
    environment:
      username:
        from_secret: DOCKER_USERNAME
      password:
        from_secret: DOCKER_PASSWORD
    commands:
      - docker build -f Dockerfile $(for i in $(cat .envs); do echo -n "--build-arg $i "; done) -t charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")-arm64 -t charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")-arm64 --no-cache --compress --squash .
      - docker login -u=$username -p=$password
      - docker push charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")-arm64
      - docker push charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")-arm64
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: docker-manifest

platform:
  os: linux
  arch: amd64

depends_on:
  - docker-amd64
  - docker-arm64

environment:
  DEFAULT_VERSION: 1.21.6
  DEFAULT_REVISION: 1

steps:
  - name: preflight
    image: python:3-alpine
    commands:
      - pip3 install semver
      - python3 genenv
  - name: manifest-full
    image: docker
    depends_on:
      - preflight
    when:
      event:
        - tag
        - promote
    environment:
      username:
        from_secret: DOCKER_USERNAME
      password:
        from_secret: DOCKER_PASSWORD
    commands:
      - docker login -u=$username -p=$password
      - docker manifest create charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//") --amend charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")-amd64 --amend charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")-arm64
      - docker manifest push charlesportwoodii/nginx:$(head -n1 .envs | sed "s/VERSION=//")
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
  - name: manifest-short
    image: docker
    depends_on:
      - preflight
    when:
      event:
        - tag
        - promote
    environment:
      username:
        from_secret: DOCKER_USERNAME
      password:
        from_secret: DOCKER_PASSWORD
    commands:
      - docker login -u=$username -p=$password
      - docker manifest create charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//") --amend charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")-amd64 --amend charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")-arm64
      - docker manifest push charlesportwoodii/nginx:$(tail -n1 .envs | sed "s/SHORT_VERSION=//")
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock
