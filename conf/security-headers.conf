# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
# This is a good starting point for implementation of HSTS. Note that this policy will
# (assuming TLS is properly configured) will indicate to browsers your site and subdomains 
# should always load over HTTPS. Additionally this will try to preload your site into HSTS
# preload lists
more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
# Block inclusion of third-party frames. Adjust as necessary for your site.
more_set_headers "X-Frame-Options: DENY";

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
# Prevent MIME type sniffing
more_set_headers "X-Content-Type-Options: nosniff";

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
# Block reflective cross site scripting
more_set_headers "X-XSS-Protection: 1; mode=block";

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
# Only allow referrer headers to be sent over TLS to cross origin sites.
more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
# Content Security Policy
# This is a "weak" default security policy, that will effectively allow anything so long as it's delivered over HTTPS
more_set_headers "Content-Security-Policy: default-src https: 'unsafe-inline' 'unsafe-eval' data:";
more_set_headers "X-Content-Security-Policy: default-src https: 'unsafe-inline' 'unsafe-eval' data:";

# A stronger policy would be to use `strict-dynamic` and a random nonce generated on each request. 
# In Nginx, we can generate this on demand by using the following policies
#
# Note that for this to work EVERY `script` and `css` tag must contain `nonce="$cspNonce"`
#
# set_secure_random_alphanum $cspNonce 32;
# more_set_headers "Content-Security-Policy: script-src 'strict-dynamic' 'nonce-$cspNonce'; object-src 'none'; base-uri 'none';"
# more_set_headers "X-Content-Security-Policy: script-src 'strict-dynamic' 'nonce-$cspNonce'; object-src 'none'; base-uri 'none';"

# Then inside any block, perform a sub_filter to replace a template variable
# sub_filter_once off;
# sub_filter_types *;
# sub_filter __CSP_NONCE__ $cspNonce;
